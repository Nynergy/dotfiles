#!/usr/bin/env bash

# (Sli)de (P)resenter :: 'slip'
# A script for presenting slides in the terminal

# Maintainer:       Ben Buchanan
# Version:          1.0.0
# Last Modified:    17-May-2024

## Present slides in the terminal
##
## Usage: $0 [OPTIONS] <FILE>
##
## Options:
##   -h, --help                     Show this usage output
##   -v, --version                  Show the version of the script
##   -c=<FILE>, --config=<FILE>     Specify a local config file to use

SCRIPT="${BASH_SOURCE[0]##*/}"

[[ -v "$XDG_CONFIG_HOME" ]] || XDG_CONFIG_HOME="$HOME/.config"

NO_FORMAT='\e[m'
BOLD='\e[1m'
ITALIC='\e[3m'
HIGHLIGHT='\e[7m'

print_usage () {
    while read -r line; do
        [[ $line =~ ^##\ ?(.*)$ ]] &&
            printf '%s\n' "${BASH_REMATCH[1]/\$0/$SCRIPT}"
    done < "${BASH_SOURCE[0]}"
}

print_version () {
    while read -r line; do
        [[ $line =~ ^#\ Version:\ *(.*)$ ]] &&
            printf '%s %s\n' "$SCRIPT" "${BASH_REMATCH[1]}"
    done < "${BASH_SOURCE[0]}"
}

main () {
    get_os
    get_w3m_path

    process_args "$@"
    process_config "$local_config_path"
    process_input_file "$presentation_file_path"

    current_slide=0

    ((BASH_VERSINFO[0] > 3)) &&
        read_flags=(-t 0.05)

    trap 'reset_terminal' EXIT
    trap 'get_term_size; redraw' WINCH

    get_term_size
    setup_terminal
    redraw

    # Vintage infinite loop
    for ((;;)); {
        read "${read_flags[@]}" -srn 1 && key "$REPLY"

        # Exit if there is no longer a terminal attached
        [[ -t 1 ]] || exit 1
    }
}

get_os () {
    case $OSTYPE in
        # Mac OS X / macOS
        darwin*)
            file_flags=bIL
            ;;
    esac
}

get_w3m_path () {
    w3m_paths=(/usr/{pkg/,}{local/,}{bin,lib,libexec,lib64,libexec64}/w3m/w3mi*)
    read -r w3m _ < <(type -p w3mimgdisplay "${w3m_paths[@]}")
}

process_args () {
    positional_args=()

    for arg in "$@"; {
        case $arg in
            -h|--help)
                print_usage
                exit 0
                ;;
            -v|--version)
                print_version
                exit 0
                ;;
            -c=*|--config=*)
                local_config_path="${arg##*=}"
                ;;
            -*)
                arg="${arg##*-}"
                arg="${arg%%=*}"
                printf '%s: invalid option -- %s\n' "$SCRIPT" "'$arg'"
                printf 'Try %s for more information.\n' "'$SCRIPT --help'"
                exit 1
                ;;
            *)
                positional_args+=("$arg") # save positional args
                ;;
        esac
    }

    # Restore positional args
    set -- "${positional_args[@]}"

    # If no file is provided, print usage
    [[ $# -gt 0 ]] || {
        print_usage
        exit 0
    }

    # Ensure provided local config file exists
    [[ -n "$local_config_path" ]] && {
        [[ -f "$local_config_path" ]] || {
            printf '%s: bad file -- %s\n' "$SCRIPT" "'$local_config_path'"
            printf 'Provided local config file must be a regular file.\n'
            exit 1
        }
    }

    # Ensure provided file is readable by slip
    # NOTE: This does not guarantee that it is a well-formatted Markdown file
    presentation_file_path="$1"
    [[ -f "$presentation_file_path" ]] || {
        printf '%s: bad file -- %s\n' "$SCRIPT" "'$presentation_file_path'"
        printf 'Provided presentation file must be a regular file.\n'
        exit 1
    }
}

process_config () {
    declare -Ag config # A: Associative Array; g: Global Scope

    config=(
        # COLORS
        [BORDER_COLOR]=7
        [TITLE_COLOR]=2
        [AUTHOR_COLOR]=3
        [SLIDE_NUMBER_COLOR]=6
        [SLIDE_NUMBER_DIVIDER_COLOR]=3
        [TITLE_CARD_COLOR]=4
        [HEADER_COLOR]=2
        [LIST_TICK_COLOR]=1
        [TASK_LIST_IN_PROGRESS_COLOR]=3
        [TASK_LIST_COMPLETE_COLOR]=2
        [INLINE_CODE_COLOR]=5
        [CODE_BLOCK_STRING_COLOR]=6
        [CODE_BLOCK_NUMBER_COLOR]=6
        [CODE_BLOCK_FUNC_COLOR]=4
        [BLOCKQUOTE_COLOR]=8
        [TABLE_COLOR]=5

        # STYLES
        [BORDER_STYLE]=''
        [TITLE_STYLE]='BOLD'
        [AUTHOR_STYLE]=''
        [SLIDE_NUMBER_STYLE]=''
        [SLIDE_NUMBER_DIVIDER_STYLE]=''
        [TITLE_CARD_STYLE]='BOLD'
        [HEADER_STYLE]='BOLD,UNDERLINE'
        [LIST_TICK_STYLE]=''
        [TASK_LIST_IN_PROGRESS_STYLE]='BOLD'
        [TASK_LIST_COMPLETE_STYLE]='BOLD'
        [INLINE_CODE_STYLE]=''
        [CODE_BLOCK_STRING_STYLE]=''
        [CODE_BLOCK_NUMBER_STYLE]=''
        [CODE_BLOCK_FUNC_STYLE]=''
        [BLOCKQUOTE_STYLE]='HIGHLIGHT'
        [TABLE_STYLE]=''

        # RENDERING
        [RENDER_BORDER_BARS]='TRUE'
        [RENDER_TITLE]='TRUE'
        [RENDER_AUTHOR]='TRUE'
        [RENDER_SLIDE_NUMBERS]='TRUE'

        # OTHER
        [BORDER_BAR_CHARACTER]='='
    )

    [[ -f "$XDG_CONFIG_HOME/slip/sliprc" ]] && {
        while read -r line; do
            [[ $line =~ ^\ *([a-zA-Z_]*)\ *=\ *(.*)\ *$ ]] && {
                key="${BASH_REMATCH[1]^^}"
                val="${BASH_REMATCH[2]^^}"

                # Validate color numbers
                [[ $key == *COLOR ]] && validate_color_num "$val" "$key"
                # Validate style strings
                [[ $key == *STYLE ]] && validate_styles "$val" "$key"
                # Validate render bools
                [[ $key == RENDER* ]] && validate_bool "$val" "$key"

                config[$key]=$val
            }
        done < "$XDG_CONFIG_HOME/slip/sliprc"
    }

    # If we got a local config file, read from that last
    [[ -f "$1" ]] && {
        while read -r line; do
            [[ $line =~ ^\ *([a-zA-Z_]*)\ *=\ *(.*)\ *$ ]] && {
                key="${BASH_REMATCH[1]^^}"
                val="${BASH_REMATCH[2]^^}"

                # Validate color numbers
                [[ $key == *COLOR ]] && validate_color_num "$val" "$key"
                # Validate style strings
                [[ $key == *STYLE ]] && validate_styles "$val" "$key"
                # Validate render bools
                [[ $key == RENDER* ]] && validate_bool "$val" "$key"

                config[$key]=$val
            }
        done < "$1"
    }

    # Convert values into actual printable styles
    for key in "${!config[@]}"; {
        val="${config[$key]}"
        [[ -n $val && $key == *COLOR ]] && 
            config[$key]="\e[38;5;${val}m"
        [[ -n $val && $key == *STYLE ]] && {
            IFS=$' \n' read -d "" -ra styles <<< "${val//,/$'\n'}"
            combined_style=
            for style in "${styles[@]}"; {
                string_to_style "$style"
                combined_style+="\e[${converted_style_num}m"
            }
            config[$key]="$combined_style"
        }
    }
}

validate_color_num () {
    # We only allow the xterm colors 0-8
    [[ $1 =~ ^[0-8]$ ]] || {
        printf '%s: error in config file\n' "$SCRIPT"
        printf '%s is not a valid value for option %s.\n' "'$1'" "'$2'"
        printf 'Value must be an integer between 0-8 (inclusive).\n'
        exit 1
    }
}

validate_styles () {
    # We only allow styles for bold, underline, italic, and highlight
    IFS=$' \n' read -d "" -ra styles <<< "${1//,/$'\n'}"
    for style in "${styles[@]}"; {
        case $style in
            BOLD|\
            UNDERLINE|\
            ITALIC|\
            HIGHLIGHT)
                ;;
            *)
                printf '%s: error in config file\n' "$SCRIPT"
                printf '%s is not a valid value for option %s.\n' "'$style'" "'$2'"
                printf 'Value must be one of: [BOLD, UNDERLINE, ITALIC, HIGHLIGHT].\n'
                exit 1
                ;;
        esac
    }
}

validate_bool () {
    # We only allow 'true' or 'false'
    [[ $1 =~ ^(TRUE|FALSE)$ ]] || {
        printf '%s: error in config file\n' "$SCRIPT"
        printf '%s is not a valid value for option %s.\n' "'$1'" "'$2'"
        printf "Value must be either 'TRUE' or 'FALSE'.\n"
        exit 1
    }
}

string_to_style () {
    case "$1" in
        BOLD)
            converted_style_num=1
            ;;
        ITALIC)
            converted_style_num=3
            ;;
        UNDERLINE)
            converted_style_num=4
            ;;
        HIGHLIGHT)
            converted_style_num=7
            ;;
        *)
            converted_style_num=
            ;;
    esac
}

process_input_file () {
    extract_slides "$1"
    extract_metadata "${slides[0]}"

    # Pop the metadata from the rest of the slides
    # We need to do this with subtitles, too
    slides=("${slides[@]:1}")
    subtitles=("${subtitles[@]:1}")

    num_slides="$((${#slides[@]} - 1))"

    presentation_dir=$(dirname "$1")
}

extract_slides () {
    declare -ag slides # a: Array, g: Global Scope
    declare -ag subtitles # a: Array, g: Global Scope

    slide=''
    current_subtitle=''
    IFS='' # Preserve whitespace
    while read -r line; do
        # Skip leading empty lines
        [[ -z $slide && -z $line ]] && continue

        [[ -n $slide && $line == '---' ]] && {
            slides+=("$slide")
            slide=''
            
            subtitles+=("$current_subtitle")

            continue
        }

        # h1 headers are treated as title cards
        [[ $line =~ ^#\ +.*$ ]] && {
            [[ -n $slide ]] && {
                slides+=("$slide")
                slide=''
            }

            slides+=("$line")
            slide=''

            # Title card slides themselves never have subtitles
            subtitles+=('')
            current_subtitle="${line### }"

            continue
        }

        # images are treated as separate slides
        [[ $line =~ ^!\[.*\]\(.*\)$ ]] && {
            [[ -n $slide ]] && {
                slides+=("$slide")
                slide=''
            }

            slides+=("$line")
            slide=''

            subtitles+=("$current_subtitle")

            continue
        }

        [[ $line != '---' ]] && slide+="$line"$'\n'
    done < "$1"

    [[ -n $slide ]] && {
        slides+=("$slide")
        subtitles+=("$current_subtitle")
    }
}

extract_metadata () {
    declare -Ag metadata # A: Associative Array, g: Global Scope

    while IFS=$'\n' read -r line; do
        [[ $line =~ ^\ *(.*)\ *:\ *(.*)\ *$ ]] && {
            key="${BASH_REMATCH[1]^^}"
            val="${BASH_REMATCH[2]}"
            metadata["$key"]="$val"
        }
    done <<< "$1"

    # Verify that a title was supplied
    [[ -z "${metadata['TITLE']}" ]] && {
        printf 'Please provide a title in your presentation metadata.\n'
        exit 1
    }
}

save_cursor_position () {
    printf '\e[s'
}

restore_cursor_position () {
    printf '\e[u'
}

use_alt_screen_buffer () {
    printf '\e[?1049h'
}

use_main_screen_buffer () {
    printf '\e[?1049l'
}

disable_line_wrapping () {
    printf '\e[?7l'
}

enable_line_wrapping () {
    printf '\e[?7h'
}

hide_cursor () {
    printf '\e[?25l'
}

show_cursor () {
    printf '\e[?25h'
}

move () {
    printf '\e[%d;%dH' "$1" "$2"
}

erase_up () {
    printf '\e[1J'
}

erase_all () {
    printf '\e[2J'
}

clear_screen () {
    move "$LINES" "$COLUMNS"
    erase_up
    [[ -v "$TMUX" ]] && erase_all # Fix for tmux
    move 0 0
    [[ $image_shown -eq 1 ]] && clear_image
}

set_modifiers () {
    printf '%b' "$1"
}

reset_modifiers () {
    printf '%b' "$NO_FORMAT"
}

setup_terminal () {
    save_cursor_position
    use_alt_screen_buffer
    disable_line_wrapping
    hide_cursor
    clear_screen

    # Hide echoing of user input
    stty -echo
}

reset_terminal () {
    [[ $image_shown -eq 1 ]] && clear_image

    enable_line_wrapping
    show_cursor
    clear_screen
    use_main_screen_buffer
    restore_cursor_position

    # Show user input
    stty echo
}

get_term_size () {
    shopt -s checkwinsize; (:;:)
}

redraw () {
    clear_screen
    slide_header
    slide_content
    slide_footer
}

slide_header () {
    move 0 0
    border_bar

    [[ ${config['RENDER_TITLE']} == TRUE ]] || return

    subtitle="${subtitles[$current_slide]}"
    title="${metadata['TITLE']}${subtitle:+" > $subtitle"}"
    set_modifiers "${config['TITLE_COLOR']}"
    set_modifiers "${config['TITLE_STYLE']}"
    hcenter_string "$title" 3
    reset_modifiers
}

border_bar () {
    [[ ${config['RENDER_BORDER_BARS']} == TRUE ]] || return

    printf -v hline "%${COLUMNS}s"
    set_modifiers "${config['BORDER_COLOR']}"
    set_modifiers "${config['BORDER_STYLE']}"
    printf '%s' "${hline// /${config['BORDER_BAR_CHARACTER']}}"
    reset_modifiers
}

hcenter_string () {
    str_len="${#1}"
    pos_x=$((COLUMNS / 2 - str_len / 2))

    move "$2" "$pos_x"
    printf '%b' "$1"
}

slide_footer () {
    move "$LINES" 0
    border_bar

    author_name
    slide_number
}

author_name () {
    [[ ${config['RENDER_AUTHOR']} == TRUE ]] || return

    author="${metadata['AUTHOR']}"

    move "$((LINES - 2))" 3
    set_modifiers "${config['AUTHOR_COLOR']}"
    set_modifiers "${config['AUTHOR_STYLE']}"
    printf '%s' "$author"
    reset_modifiers
}

slide_number () {
    [[ ${config['RENDER_SLIDE_NUMBERS']} == TRUE ]] || return

    move "$((LINES - 2))" "$((COLUMNS - 4))"
    set_modifiers "${config['SLIDE_NUMBER_COLOR']}"
    set_modifiers "${config['SLIDE_NUMBER_STYLE']}"
    printf '%3d' "$((num_slides + 1))"
    reset_modifiers

    move "$((LINES - 2))" "$((COLUMNS - 6))"
    set_modifiers "${config['SLIDE_NUMBER_DIVIDER_COLOR']}"
    set_modifiers "${config['SLIDE_NUMBER_DIVIDER_STYLE']}"
    printf '/'
    reset_modifiers

    move "$((LINES - 2))" "$((COLUMNS - 10))"
    set_modifiers "${config['SLIDE_NUMBER_COLOR']}"
    set_modifiers "${config['SLIDE_NUMBER_STYLE']}"
    printf '%3d' "$((current_slide + 1))"
    reset_modifiers
}

slide_content () {
    content="${slides[$current_slide]}"

    pos_y=5
    in_code_block=0
    while read -r line; do
        move "$pos_y" 3

        # Check for formatting opportunities
        # **BOLD** __BOLD__
        while [[ $line =~ ^(.*)(\*\*|__)(.*)(\*\*|__)(.*)$ ]]; do
            line="${BASH_REMATCH[1]}"
            line+="$BOLD${BASH_REMATCH[3]}$NO_FORMAT"
            line+="${BASH_REMATCH[5]}"
        done

        # *italic* _italic_
        while [[ $line =~ ^(.*)(\*|_)(.*)(\*|_)(.*)$ ]]; do
            line="${BASH_REMATCH[1]}"
            line+="$ITALIC${BASH_REMATCH[3]}$NO_FORMAT"
            line+="${BASH_REMATCH[5]}"
        done

        # ==Highlighted Text==
        while [[ $line =~ ^(.*)(==)(.*)(==)(.*)$ ]]; do
            line="${BASH_REMATCH[1]}"
            line+="$HIGHLIGHT${BASH_REMATCH[3]}$NO_FORMAT"
            line+="${BASH_REMATCH[5]}"
        done

        # Blockquotes (>)
        # Nested Blockquotes (>>)
        while [[ $line =~ ^(\ *)\>(.*)$ ]]; do
            printf '%s ' "${BASH_REMATCH[1]}"
            set_modifiers "${config['BLOCKQUOTE_COLOR']}"
            set_modifiers "${config['BLOCKQUOTE_STYLE']}"
            printf ' '
            reset_modifiers
            line="${BASH_REMATCH[2]}"
        done

        # Code ```blocks```
        # Toggle between code block mode when we encounter three backticks
        [[ $line == '```' ]] && {
            ((in_code_block ^= 1))
            continue
        }

        # Style things inside code blocks
        [[ $in_code_block == 1 ]] && {
            # Two different string literals
            while [[ $line =~ ^(.*)(\'.*\')(.*)$ ]]; do
                printf '%b' "${BASH_REMATCH[1]}"
                set_modifiers "${config['CODE_BLOCK_STRING_COLOR']}"
                set_modifiers "${config['CODE_BLOCK_STRING_STYLE']}"
                printf '%b' "${BASH_REMATCH[2]}"
                reset_modifiers
                line="${BASH_REMATCH[3]}"
            done
            while [[ $line =~ ^(.*)(\".*\")(.*)$ ]]; do
                printf '%b' "${BASH_REMATCH[1]}"
                set_modifiers "${config['CODE_BLOCK_STRING_COLOR']}"
                set_modifiers "${config['CODE_BLOCK_STRING_STYLE']}"
                printf '%b' "${BASH_REMATCH[2]}"
                reset_modifiers
                line="${BASH_REMATCH[3]}"
            done

            # Number literals
            while [[ $line =~ ^(.*[^0-9])([0-9]+)([^0-9].*)$ ]]; do
                printf '%b' "${BASH_REMATCH[1]}"
                set_modifiers "${config['CODE_BLOCK_NUMBER_COLOR']}"
                set_modifiers "${config['CODE_BLOCK_NUMBER_STYLE']}"
                printf '%b' "${BASH_REMATCH[2]}"
                reset_modifiers
                line="${BASH_REMATCH[3]}"
            done

            # Generic function names
            while [[ $line =~ ^(.*\ )([a-zA-Z][0-9a-zA-Z]*)(\(\).*)$ ]]; do
                printf '%b' "${BASH_REMATCH[1]}"
                set_modifiers "${config['CODE_BLOCK_FUNC_COLOR']}"
                set_modifiers "${config['CODE_BLOCK_FUNC_STYLE']}"
                printf '%b' "${BASH_REMATCH[2]}"
                reset_modifiers
                line="${BASH_REMATCH[3]}"
            done
        }

        # Inline `code`
        while [[ $line =~ ^(.*)(\`)(.*)(\`)(.*)$ ]]; do
            line="${BASH_REMATCH[1]}"
            line+="${config['INLINE_CODE_COLOR']}"
            line+="${config['INLINE_CODE_STYLE']}"
            line+="${BASH_REMATCH[3]}"
            line+="$NO_FORMAT"
            line+="${BASH_REMATCH[5]}"
        done

        # h2 - h6
        [[ $line =~ ^#{2,6}\ +.*$ ]] && {
            color="${config['HEADER_COLOR']}"
            style="${config['HEADER_STYLE']}"
            line="$color$style$line$NO_FORMAT"
        }

        # Task Lists
        [[ $line =~ ^(\ *-\ \[)([\ ~xX]|-)(\]\ +.*)$ ]] && {
            case "${BASH_REMATCH[2]}" in
                '~'|'-')
                    color="${config['TASK_LIST_IN_PROGRESS_COLOR']}"
                    style="${config['TASK_LIST_IN_PROGRESS_STYLE']}"
                    ;;
                'x'|'X')
                    color="${config['TASK_LIST_COMPLETE_COLOR']}"
                    style="${config['TASK_LIST_COMPLETE_STYLE']}"
                    ;;
                *)
                    color="$NO_FORMAT"
                    style="$NO_FORMAT"
                    ;;
            esac
            line="${BASH_REMATCH[1]}"
            line+="$color$style"
            line+="${BASH_REMATCH[2]}"
            line+="$NO_FORMAT"
            line+="${BASH_REMATCH[3]}"
        }

        # Ordered & Unordered Lists
        [[ $line =~ ^(\ *)(-|\+|\*|[0-9]*\.)(\ +.*)$ ]] && {
            printf '%b' "${BASH_REMATCH[1]}"
            set_modifiers "${config['LIST_TICK_COLOR']}"
            set_modifiers "${config['LIST_TICK_STYLE']}"
            printf '%b' "${BASH_REMATCH[2]}" 
            reset_modifiers
            line="${BASH_REMATCH[3]}"
        }

        # Tables
        # Regular rows
        [[ $line =~ ^(\ *)\|([^-]*)\|(.*)$ ]] && {
            color="${config['TABLE_COLOR']}"
            style="${config['TABLE_STYLE']}"
            line="${line//\|/$color$style\|$NO_FORMAT}"
        }
        # Divider rows
        [[ $line =~ ^(\ *)\|(\ *-+\ *)\|(.*)$ ]] && {
            color="${config['TABLE_COLOR']}"
            style="${config['TABLE_STYLE']}"
            line="${line//\|/$color$style\|$NO_FORMAT}"
            line="${line//-/$color$style-$NO_FORMAT}"
        }

        # Images (w3m-img)
        [[ $line =~ ^!\[(.*)\]\((.*)\)$ ]] && {
            draw_img "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
            continue
        }

        # Print title cards centered
        if [[ $line =~ ^#\ +.*$ ]]; then
            set_modifiers "${config['TITLE_CARD_COLOR']}"
            set_modifiers "${config['TITLE_CARD_STYLE']}"
            hcenter_string "${line### }" "$((LINES / 2))"
            reset_modifiers
        else
            printf '%b' "$line"
        fi

        pos_y=$((pos_y + 1))
    done <<< "$content"
}

render_img_error () {
    printf 'Error when attempting to display image: %s' "$error_msg"
}

draw_img () {
    caption="$1"
    img_path="$presentation_dir/$2"

    # Rather than return in certain cases, just print an error to the slide
    validate_img || {
        case $? in
            "$BAD_X_SERVER")
                error_msg='X server is not running, or framebuffer is unavailable!' ;;
            "$BAD_FILE")
                error_msg="Path '$img_path' is not a valid image file!" ;;
            "$BAD_W3M")
                error_msg='Could not locate w3m_img!' ;;
            "$BAD_WIN_INFO_CMD")
                error_msg="Window information tool '$win_info_cmd' is not installed!" ;;
            *)
                error_msg='Something went wrong, and we have no idea why :(' ;;
        esac

        render_img_error

        return
    }

    get_pixel_dimensions || {
        case $? in
            "$BAD_XDOTOOL")
                error_msg='xdotool could not declare the window dimensions!' ;;
            *)
                error_msg='Something went wrong, and we have no idea why :(' ;;
        esac

        render_img_error

        return
    }

    single_line_h=$((HEIGHT / LINES))

    # If we're in a TMUX session, we'll need to do some math
    [[ $TMUX ]] && calculate_tmux_dimensions

    # Get the image size in pixels
    IFS=' ' read -r img_width img_height < <("$w3m" <<< "5;$img_path")

    # Subtract lines to make image appear within certain area
    ((HEIGHT=HEIGHT-(11*single_line_h)))

    # Set our height/width bounds
    ((img_width > WIDTH)) && {
        ((img_height=img_height*WIDTH/img_width))
        ((img_width=WIDTH))
    }

    ((img_height > HEIGHT)) && {
        ((img_width=img_width*HEIGHT/img_height))
        ((img_height=HEIGHT))
    }

    # Calculate centered offsets
    W3M_XOFFSET=$((${x_offset:-0} + WIDTH / 2 - img_width / 2))
    W3M_YOFFSET=$((${y_offset:-0} + 4 * single_line_h))

    # Small delay for VTE terminals
    ((BASH_VERSINFO[0] > 3)) &&
        read "${read_flags[@]}" -srn 1

    # Display the image
    printf '0;1;%s;%s;%s;%s;;;;;%s\n3;\n4\n' \
        "$W3M_XOFFSET" \
        "$W3M_YOFFSET" \
        "$img_width" \
        "$img_height" \
        "$img_path" | "$w3m" &>/dev/null

    image_shown=1

    # Display the caption underneath the image
    hcenter_string "$caption" "$((LINES - 4))"
}

validate_img () {
    # We'll use "enums" for our error "types"
    BAD_X_SERVER=101
    BAD_FILE=102
    BAD_W3M=103
    BAD_WIN_INFO_CMD=104

    # Check if we can use the framebuffer
    [[ $(tty) == /dev/tty[0-9]* && -w /dev/fb0 ]] && win_info_cmd=fbset

    # Ensure X is running and able to show the image
    [[ -z $DISPLAY && $win_info_cmd != fbset ]] && return $BAD_X_SERVER

    # Ensure image exists, and is a file
    get_mime_type "$img_path"
    [[ $mime_type != image/* ]] && return $BAD_FILE

    # Ensure w3m-img is installed
    type -p "$w3m" &>/dev/null || return $BAD_W3M

    # Ensure our win_info_cmd is installed
    type -p "${win_info_cmd:=xdotool}" &>/dev/null || return $BAD_WIN_INFO_CMD

    return 0
}

get_pixel_dimensions () {
    # We'll use "enums" for our error "types"
    BAD_XDOTOOL=105

    # Get terminal window size in pixels
    if [[ $win_info_cmd == xdotool ]]; then
        IFS=$'\n' read -d "" -ra win_info \
            < <(xdotool getactivewindow getwindowgeometry --shell)

        declare -g "${win_info[@]}" &>/dev/null || return $BAD_XDOTOOL
    else
        [[ $(fbset --show) =~ .*\"([0-9]+x[0-9]+)\".* ]]
        IFS=x read -r WIDTH HEIGHT <<< "${BASH_REMATCH[1]}"
    fi

    return 0
}

calculate_tmux_dimensions () {
    # Get the full window layout
    read -r layout < <(tmux display-message -p '#{window_layout}')

    # Get the full window dimensions in cells
    [[ $layout =~ .{4},([0-9]+)x([0-9]+),.* ]]
    window_w="${BASH_REMATCH[1]}"
    window_h="${BASH_REMATCH[2]}"
    single_line_h=$((HEIGHT / window_h + 2))

    # Extract the x and y offsets of the active pane
    while [[ $layout =~ (.*)[0-9]+x[0-9]+,([0-9]+),([0-9]+),([0-9]+)(.*) ]]; do
        pane_id="${BASH_REMATCH[4]}"

        [[ "%$pane_id" == "$TMUX_PANE" ]] && {
            x_offset="${BASH_REMATCH[2]}"
            y_offset="${BASH_REMATCH[3]}"
        }

        layout="${BASH_REMATCH[1]}${BASH_REMATCH[5]}"
    done

    # Get the active pane's cell width/height
    IFS=' ' read -r pane_w pane_h \
        < <(tmux display-message -p '#{pane_width} #{pane_height}')

    # Calculate x/y offsets in pixels
    x_offset=$(bc -l <<< "$x_offset / $window_w * $WIDTH" || '0.0')
    [[ $x_offset =~ ([0-9]+)\..* ]] && x_offset="${BASH_REMATCH[1]}"

    y_offset=$(bc -l <<< "$y_offset / $window_h * $HEIGHT" || '0.0')
    [[ $y_offset =~ ([0-9]+)\..* ]] && y_offset="${BASH_REMATCH[1]}"

    # Calculate actual WIDTH and HEIGHT in pixels of tmux pane
    width=$(bc -l <<< "$pane_w / $window_w * $WIDTH" || '0.0')
    [[ $width =~ ([0-9]+)\..* ]] && WIDTH="${BASH_REMATCH[1]}"

    height=$(bc -l <<< "$pane_h / $window_h * $HEIGHT" || '0.0')
    [[ $height =~ ([0-9]+)\..* ]] && HEIGHT="${BASH_REMATCH[1]}"
}

clear_image () {
    # Clear image
    printf '6;%s;%s;%s;%s\n3;' \
        "$W3M_XOFFSET" \
        "$W3M_YOFFSET" \
        "$((img_width + 2))" \
        "$((img_height + 2))" | "$w3m" &>/dev/null
    # Additional pixels for clearing are to remove artifacts

    image_shown=0
}

get_mime_type () {
    mime_type=$(file "-${file_flags:-biL}" "$1" 2>/dev/null)
}

key () {
    # Handle special key presses
    [[ $1 == $'\e' ]] && {
        read "${read_flags[@]}" -rsn 2

        # Handle a normal escape key press
        [[ ${1}${REPLY} == $'\e\e['* ]] &&
            read "${read_flags[@]}" -rsn 1 _

        local special_key=${1}${REPLY}
    }

    case ${special_key:-$1} in
        # '\e'              :: Escape
        q|$'\e')
            exit
            ;;
        # ' '               :: Space
        # ''                :: Enter
        # '\e[C', '\e[OC'   :: Right Arrow Key
        l|' '|''|$'\e[C'|$'\e[OC')
            : $((current_slide + 1))
            current_slide=$((_ > num_slides ? current_slide : _))
            redraw
            ;;
        # '\177', '\b'      :: Backspace
        # '\e[D', '\e[OD'   :: Left Arrow Key
        h|$'\177'|$'\b'|$'\e[D'|$'\e[OD')
            : $((current_slide - 1))
            current_slide=$((_ < 0 ? current_slide : _))
            redraw
            ;;
    esac
}

main "$@"
