#!/usr/bin/env bash

# A bootstrap script for "installing" (linking) things
# Original bootstrap script by Andrew Burgess (github.com/andrew8088)

# Maintainer:       Ben Buchanan
# Version:          1.0.0
# Last Modified:    22-Feb-2024

# Setup some globals
USER_OPTIONS='       [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?'
ENV_FILE=$HOME/.env.sh

# Orient ourselves in the correct directory
cd "$(dirname "$0")/.."
DOTFILES=$(pwd -P)

set -e

echo

# Log Messages
info () {
    printf "\r[ \033[0;34m..\033[0m ] %s\n" "$1"
}

user () {
    printf "\r[ \033[0;33m??\033[0m ] %s\n" "$1"
}

success () {
    printf "\r\033[2K[ \033[0;32mOK\033[0m ] %s\n" "$1"
}

fail () {
    printf "\r\033[2K[\033[0;31mFAIL\033[0m] %s\n" "$1"
    echo
    exit
}

# Link Files
link_file () {
    local src=$1 dst=$2

    local skip overwrite backup action

    if [ -f "$dst" ] || [ -d "$dst" ] || [ -L "$dst" ]
    then
        if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
        then
            local current_src=
            current_src=$(readlink "$dst")

            if [ "$current_src" == "$src" ]
            then
                skip=true
            else
                user "File already exists: $dst ($(basename "$src")), what do you want to do?\n$USER_OPTIONS"

                read -r -n 1 action < /dev/tty

                case "$action" in
                    s)
                        skip=true ;;
                    S)
                        skip_all=true ;;
                    o)
                        overwrite=true ;;
                    O)
                        overwrite_all=true ;;
                    b)
                        backup=true ;;
                    B)
                        backup_all=true ;;
                    *)
                        ;;
                esac
            fi
        fi

        # If the individual flags are not set, use the 'all' variants
        skip=${skip:-$skip_all}
        overwrite=${overwrite:-$overwrite_all}
        backup=${backup:-$backup_all}

        if [ "$skip" == "true" ]
        then
            success "skipped $src"
        fi

        if [ "$overwrite" == "true" ]
        then
            rm -rf "$dst"
            success "removed $dst"
        fi

        if [ "$backup" == "true" ]
        then
            mv "$dst" "${dst}.bak"
            success "moved $dst to ${dst}.bak"
        fi
    fi

    if [ "$skip" != "true" ]
    then
        ln -s "$src" "$dst"
        success "linked $src to $dst"
    fi
}

# Grab all the links from the prop files
install_dotfiles () {
    info 'installing dotfiles'

    local skip_all=false overwrite_all=false backup_all=false

    find -H "$DOTFILES" -maxdepth 2 -name 'links.prop' -not -path '*.git*' | while read -r linkfile
    do
        while read -r line
        do
            local src=
            local dst=
            local dir=

            src=$(echo "$line" | cut -d '=' -f 1)
            dst=$(echo "$line" | cut -d '=' -f 2)
            dir=$(dirname "$dst")

            mkdir -p "$dir"
            link_file "$src" "$dst"
        done < "$linkfile"
    done
}

# Create environment file for user-specified data
create_env_file () {
    if test -f "$ENV_FILE"; then
        success "$ENV_FILE file already exists, skipping"
    else
        echo "export DOTFILES=$DOTFILES" > "$ENV_FILE"
        success "created $ENV_FILE"
    fi
}

populate_env_file () {
    find -H "$DOTFILES" -maxdepth 2 -name 'env.prop' -not -path '*.git*' | while read -r envfile
    do
        while read -r line
        do
            local script=
            local var=

            script=$(echo "$line" | cut -d '=' -f 1)
            var=$(echo "$line" | cut -d '=' -f 2)

            if ! grep -q "$var" "$ENV_FILE"
            then
                # Fresh add
                {
                    echo;
                    echo "# $script";
                    echo "$var=";
                } >> "$ENV_FILE"
            else
                # Append script name
                local comment=
                local line_num=
                local scripts=

                comment=$(grep -B 1 -n "$var" "$ENV_FILE" | head -n 1)
                line_num=$(echo "$comment" | cut -d '-' -f 1)
                scripts=$(echo "$comment" | cut -d '-' -f 2 | sed 's/# //')

                # Only append if it's not already there
                if [[ "$scripts" != *"$script"* ]]
                then
                    sed -i "$line_num s/$/, $script/" "$ENV_FILE"
                fi
            fi
        done < "$envfile"
    done

    success "populated $ENV_FILE"
}

install_dotfiles
create_env_file

echo
success 'all installed!'
echo
